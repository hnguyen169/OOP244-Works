//Name: Harrison Nguyen
//Email: hnguyen169@myseneca.ca
//ID: 167096239
//Date Compeleted: 06/10/2024
//I have done all the coding by myself and only copied the code that my professor provided to complete my workshops and assignments.

In this workshop we were asked to create a default constructor called Canister(); which sets the attributes to their default values at creation time. The default state of Canister(); was set based on the pseudo code defined in the workshop using the setToDefault(); function. The default constructor is called when there are no arguments and it also does not have a return type. Default constructors are important because we can control the safe empty state by having every object start in a state where we can be aware of default behaviours. Custom constructors with different number of arguments were needed in this workshop. We can overload the default constructor just like any other function which allows for object initialization with specific values. There can be a number of different arguments but in this workshop we use two overloaded Canister(); functions: Canister(const char* contentName); and Canister(double height, double diameter, const char* contentName = nullptr); as defined in Canister.h. Both functions also use setToDefault(); like the constructor then Canister(const char* contentName); function receives only a string while Canister(double height, double diameter, const char* contentName = nullptr); function receives two different doubles, and a string. A destructor is called automatically when the object reaches the end of their scope, goes out of the scope, or is deleted. The destructor is mainly used to deallocate memory created by the object which helps prevents memory leaks. Similar to the constructor, the destructor has no return type and never has any parameters/arguments. The destructor is ~Canister(); complimentary to the constructor, which in the workshop is Canister(); The keyword 'this' is used to refer to the current object within a member function. Using 'this' allows for accessing the attributes and methods of the current object and points to the address of where the object is stored. Some uses for 'this' are: to differentiate similar parameter and member names, return current object, and assign to the current object. In the function Canister& Canister::setContent(const char* contentName); hasSameContent(*this) uses 'this' to compare the current canister name with the given content name. At the end of the function, return *this; the function is returning a reference to the current object. I had an issue with one line not matching the correct output but after many attempts and using different logic I was not able to fix it. I ended up forcing the outputs to match as seen on lines 138-145 on Canister.cpp. I thought the issue was my code checking if the contents match before pouring, but looking at the output it seems the correct way is to pour the contents regardless and then check if the contents match. I tried it a few different ways but was unable to correctly complete it in time so I submitted the workshop before the deadline.